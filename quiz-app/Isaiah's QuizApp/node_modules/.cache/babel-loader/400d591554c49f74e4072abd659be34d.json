{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveExportDeclaration;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction resolveExportDeclaration(path) {\n  const definitions = [];\n\n  if (path.node.default) {\n    definitions.push(path.get('declaration'));\n  } else if (path.node.declaration) {\n    if (_astTypes.namedTypes.VariableDeclaration.check(path.node.declaration)) {\n      path.get('declaration', 'declarations').each(declarator => definitions.push(declarator));\n    } else {\n      definitions.push(path.get('declaration'));\n    }\n  } else if (path.node.specifiers) {\n    path.get('specifiers').each(specifier => definitions.push(specifier.node.id ? specifier.get('id') : specifier.get('local')));\n  }\n\n  return definitions.map(definition => (0, _resolveToValue.default)(definition));\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/resolveExportDeclaration.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","resolveExportDeclaration","_astTypes","_resolveToValue","path","definitions","node","push","get","declaration","namedTypes","VariableDeclaration","check","each","declarator","specifiers","specifier","id","map","definition"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,wBAAlB;;AAEA,IAAIC,SAAS,GAAGP,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIQ,eAAe,GAAGT,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,wBAAT,CAAkCG,IAAlC,EAAwC;AACtC,QAAMC,WAAW,GAAG,EAApB;;AAEA,MAAID,IAAI,CAACE,IAAL,CAAUN,OAAd,EAAuB;AACrBK,IAAAA,WAAW,CAACE,IAAZ,CAAiBH,IAAI,CAACI,GAAL,CAAS,aAAT,CAAjB;AACD,GAFD,MAEO,IAAIJ,IAAI,CAACE,IAAL,CAAUG,WAAd,EAA2B;AAChC,QAAIP,SAAS,CAACQ,UAAV,CAAqBC,mBAArB,CAAyCC,KAAzC,CAA+CR,IAAI,CAACE,IAAL,CAAUG,WAAzD,CAAJ,EAA2E;AACzEL,MAAAA,IAAI,CAACI,GAAL,CAAS,aAAT,EAAwB,cAAxB,EAAwCK,IAAxC,CAA6CC,UAAU,IAAIT,WAAW,CAACE,IAAZ,CAAiBO,UAAjB,CAA3D;AACD,KAFD,MAEO;AACLT,MAAAA,WAAW,CAACE,IAAZ,CAAiBH,IAAI,CAACI,GAAL,CAAS,aAAT,CAAjB;AACD;AACF,GANM,MAMA,IAAIJ,IAAI,CAACE,IAAL,CAAUS,UAAd,EAA0B;AAC/BX,IAAAA,IAAI,CAACI,GAAL,CAAS,YAAT,EAAuBK,IAAvB,CAA4BG,SAAS,IAAIX,WAAW,CAACE,IAAZ,CAAiBS,SAAS,CAACV,IAAV,CAAeW,EAAf,GAAoBD,SAAS,CAACR,GAAV,CAAc,IAAd,CAApB,GAA0CQ,SAAS,CAACR,GAAV,CAAc,OAAd,CAA3D,CAAzC;AACD;;AAED,SAAOH,WAAW,CAACa,GAAZ,CAAgBC,UAAU,IAAI,CAAC,GAAGhB,eAAe,CAACH,OAApB,EAA6BmB,UAA7B,CAA9B,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveExportDeclaration;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction resolveExportDeclaration(path) {\n  const definitions = [];\n\n  if (path.node.default) {\n    definitions.push(path.get('declaration'));\n  } else if (path.node.declaration) {\n    if (_astTypes.namedTypes.VariableDeclaration.check(path.node.declaration)) {\n      path.get('declaration', 'declarations').each(declarator => definitions.push(declarator));\n    } else {\n      definitions.push(path.get('declaration'));\n    }\n  } else if (path.node.specifiers) {\n    path.get('specifiers').each(specifier => definitions.push(specifier.node.id ? specifier.get('id') : specifier.get('local')));\n  }\n\n  return definitions.map(definition => (0, _resolveToValue.default)(definition));\n}"]},"metadata":{},"sourceType":"script"}