{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = componentMethodsHandler;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _getMemberValuePath = _interopRequireDefault(require(\"../utils/getMemberValuePath\"));\n\nvar _getMethodDocumentation = _interopRequireDefault(require(\"../utils/getMethodDocumentation\"));\n\nvar _isReactComponentClass = _interopRequireDefault(require(\"../utils/isReactComponentClass\"));\n\nvar _isReactComponentMethod = _interopRequireDefault(require(\"../utils/isReactComponentMethod\"));\n\nvar _match = _interopRequireDefault(require(\"../utils/match\"));\n\nvar _traverse = require(\"../utils/traverse\");\n\nvar _resolveToValue = _interopRequireDefault(require(\"../utils/resolveToValue\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The following values/constructs are considered methods:\n *\n * - Method declarations in classes (except \"constructor\" and React lifecycle\n *   methods\n * - Public class fields in classes whose value are a functions\n * - Object properties whose values are functions\n */\n\n\nfunction isMethod(path) {\n  const isProbablyMethod = _astTypes.namedTypes.MethodDefinition.check(path.node) && path.node.kind !== 'constructor' || (_astTypes.namedTypes.ClassProperty.check(path.node) || _astTypes.namedTypes.Property.check(path.node)) && _astTypes.namedTypes.Function.check(path.get('value').node);\n\n  return isProbablyMethod && !(0, _isReactComponentMethod.default)(path);\n}\n\nfunction findAssignedMethods(scope, idPath) {\n  const results = [];\n\n  if (!_astTypes.namedTypes.Identifier.check(idPath.node)) {\n    return results;\n  }\n\n  const name = idPath.node.name;\n  const idScope = idPath.scope.lookup(idPath.node.name);\n  (0, _traverse.traverseShallow)(scope.path, {\n    visitAssignmentExpression: function (path) {\n      const node = path.node;\n\n      if ((0, _match.default)(node.left, {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name\n        }\n      }) && path.scope.lookup(name) === idScope && _astTypes.namedTypes.Function.check((0, _resolveToValue.default)(path.get('right')).node)) {\n        results.push(path);\n        return false;\n      }\n\n      return this.traverse(path);\n    }\n  });\n  return results;\n}\n/**\n * Extract all flow types for the methods of a react component. Doesn't\n * return any react specific lifecycle methods.\n */\n\n\nfunction componentMethodsHandler(documentation, path) {\n  // Extract all methods from the class or object.\n  let methodPaths = [];\n\n  if ((0, _isReactComponentClass.default)(path)) {\n    methodPaths = path.get('body', 'body').filter(isMethod);\n  } else if (_astTypes.namedTypes.ObjectExpression.check(path.node)) {\n    methodPaths = path.get('properties').filter(isMethod); // Add the statics object properties.\n\n    const statics = (0, _getMemberValuePath.default)(path, 'statics');\n\n    if (statics) {\n      statics.get('properties').each(p => {\n        if (isMethod(p)) {\n          p.node.static = true;\n          methodPaths.push(p);\n        }\n      });\n    }\n  } else if (_astTypes.namedTypes.VariableDeclarator.check(path.parent.node) && path.parent.node.init === path.node && _astTypes.namedTypes.Identifier.check(path.parent.node.id)) {\n    methodPaths = findAssignedMethods(path.parent.scope, path.parent.get('id'));\n  } else if (_astTypes.namedTypes.AssignmentExpression.check(path.parent.node) && path.parent.node.right === path.node && _astTypes.namedTypes.Identifier.check(path.parent.node.left)) {\n    methodPaths = findAssignedMethods(path.parent.scope, path.parent.get('left'));\n  } else if (_astTypes.namedTypes.FunctionDeclaration.check(path.node)) {\n    methodPaths = findAssignedMethods(path.parent.scope, path.get('id'));\n  }\n\n  documentation.set('methods', methodPaths.map(_getMethodDocumentation.default).filter(Boolean));\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/handlers/componentMethodsHandler.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","componentMethodsHandler","_astTypes","_getMemberValuePath","_getMethodDocumentation","_isReactComponentClass","_isReactComponentMethod","_match","_traverse","_resolveToValue","isMethod","path","isProbablyMethod","namedTypes","MethodDefinition","check","node","kind","ClassProperty","Property","Function","get","findAssignedMethods","scope","idPath","results","Identifier","name","idScope","lookup","traverseShallow","visitAssignmentExpression","left","type","object","push","traverse","documentation","methodPaths","filter","ObjectExpression","statics","each","p","static","VariableDeclarator","parent","init","id","AssignmentExpression","right","FunctionDeclaration","set","map","Boolean"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = componentMethodsHandler;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _getMemberValuePath = _interopRequireDefault(require(\"../utils/getMemberValuePath\"));\n\nvar _getMethodDocumentation = _interopRequireDefault(require(\"../utils/getMethodDocumentation\"));\n\nvar _isReactComponentClass = _interopRequireDefault(require(\"../utils/isReactComponentClass\"));\n\nvar _isReactComponentMethod = _interopRequireDefault(require(\"../utils/isReactComponentMethod\"));\n\nvar _match = _interopRequireDefault(require(\"../utils/match\"));\n\nvar _traverse = require(\"../utils/traverse\");\n\nvar _resolveToValue = _interopRequireDefault(require(\"../utils/resolveToValue\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The following values/constructs are considered methods:\n *\n * - Method declarations in classes (except \"constructor\" and React lifecycle\n *   methods\n * - Public class fields in classes whose value are a functions\n * - Object properties whose values are functions\n */\nfunction isMethod(path) {\n  const isProbablyMethod = _astTypes.namedTypes.MethodDefinition.check(path.node) && path.node.kind !== 'constructor' || (_astTypes.namedTypes.ClassProperty.check(path.node) || _astTypes.namedTypes.Property.check(path.node)) && _astTypes.namedTypes.Function.check(path.get('value').node);\n\n  return isProbablyMethod && !(0, _isReactComponentMethod.default)(path);\n}\n\nfunction findAssignedMethods(scope, idPath) {\n  const results = [];\n\n  if (!_astTypes.namedTypes.Identifier.check(idPath.node)) {\n    return results;\n  }\n\n  const name = idPath.node.name;\n  const idScope = idPath.scope.lookup(idPath.node.name);\n  (0, _traverse.traverseShallow)(scope.path, {\n    visitAssignmentExpression: function (path) {\n      const node = path.node;\n\n      if ((0, _match.default)(node.left, {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name\n        }\n      }) && path.scope.lookup(name) === idScope && _astTypes.namedTypes.Function.check((0, _resolveToValue.default)(path.get('right')).node)) {\n        results.push(path);\n        return false;\n      }\n\n      return this.traverse(path);\n    }\n  });\n  return results;\n}\n/**\n * Extract all flow types for the methods of a react component. Doesn't\n * return any react specific lifecycle methods.\n */\n\n\nfunction componentMethodsHandler(documentation, path) {\n  // Extract all methods from the class or object.\n  let methodPaths = [];\n\n  if ((0, _isReactComponentClass.default)(path)) {\n    methodPaths = path.get('body', 'body').filter(isMethod);\n  } else if (_astTypes.namedTypes.ObjectExpression.check(path.node)) {\n    methodPaths = path.get('properties').filter(isMethod); // Add the statics object properties.\n\n    const statics = (0, _getMemberValuePath.default)(path, 'statics');\n\n    if (statics) {\n      statics.get('properties').each(p => {\n        if (isMethod(p)) {\n          p.node.static = true;\n          methodPaths.push(p);\n        }\n      });\n    }\n  } else if (_astTypes.namedTypes.VariableDeclarator.check(path.parent.node) && path.parent.node.init === path.node && _astTypes.namedTypes.Identifier.check(path.parent.node.id)) {\n    methodPaths = findAssignedMethods(path.parent.scope, path.parent.get('id'));\n  } else if (_astTypes.namedTypes.AssignmentExpression.check(path.parent.node) && path.parent.node.right === path.node && _astTypes.namedTypes.Identifier.check(path.parent.node.left)) {\n    methodPaths = findAssignedMethods(path.parent.scope, path.parent.get('left'));\n  } else if (_astTypes.namedTypes.FunctionDeclaration.check(path.node)) {\n    methodPaths = findAssignedMethods(path.parent.scope, path.get('id'));\n  }\n\n  documentation.set('methods', methodPaths.map(_getMethodDocumentation.default).filter(Boolean));\n}"]},"metadata":{},"sourceType":"script"}