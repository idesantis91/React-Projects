{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.String = toString;\nexports.Array = toArray;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/*eslint no-loop-func: 0, no-use-before-define: 0*/\n\n/**\n * Splits a MemberExpression or CallExpression into parts.\n * E.g. foo.bar.baz becomes ['foo', 'bar', 'baz']\n */\n\n\nfunction toArray(path) {\n  const parts = [path];\n  let result = [];\n\n  while (parts.length > 0) {\n    path = parts.shift();\n    const node = path.node;\n\n    if (_astTypes.namedTypes.CallExpression.check(node)) {\n      parts.push(path.get('callee'));\n      continue;\n    } else if (_astTypes.namedTypes.MemberExpression.check(node)) {\n      parts.push(path.get('object'));\n\n      if (node.computed) {\n        const resolvedPath = (0, _resolveToValue.default)(path.get('property'));\n\n        if (resolvedPath !== undefined) {\n          result = result.concat(toArray(resolvedPath));\n        } else {\n          result.push('<computed>');\n        }\n      } else {\n        result.push(node.property.name);\n      }\n\n      continue;\n    } else if (_astTypes.namedTypes.Identifier.check(node)) {\n      result.push(node.name);\n      continue;\n    } else if (_astTypes.namedTypes.Literal.check(node)) {\n      result.push(node.raw);\n      continue;\n    } else if (_astTypes.namedTypes.ThisExpression.check(node)) {\n      result.push('this');\n      continue;\n    } else if (_astTypes.namedTypes.ObjectExpression.check(node)) {\n      const properties = path.get('properties').map(function (property) {\n        return toString(property.get('key')) + ': ' + toString(property.get('value'));\n      });\n      result.push('{' + properties.join(', ') + '}');\n      continue;\n    } else if (_astTypes.namedTypes.ArrayExpression.check(node)) {\n      result.push('[' + path.get('elements').map(toString).join(', ') + ']');\n      continue;\n    }\n  }\n\n  return result.reverse();\n}\n/**\n * Creates a string representation of a member expression.\n */\n\n\nfunction toString(path) {\n  return toArray(path).join('.');\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/expressionTo.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","String","toString","Array","toArray","_astTypes","_resolveToValue","path","parts","result","length","shift","node","namedTypes","CallExpression","check","push","get","MemberExpression","computed","resolvedPath","default","undefined","concat","property","name","Identifier","Literal","raw","ThisExpression","ObjectExpression","properties","map","join","ArrayExpression","reverse"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.String = toString;\nexports.Array = toArray;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/*eslint no-loop-func: 0, no-use-before-define: 0*/\n\n/**\n * Splits a MemberExpression or CallExpression into parts.\n * E.g. foo.bar.baz becomes ['foo', 'bar', 'baz']\n */\nfunction toArray(path) {\n  const parts = [path];\n  let result = [];\n\n  while (parts.length > 0) {\n    path = parts.shift();\n    const node = path.node;\n\n    if (_astTypes.namedTypes.CallExpression.check(node)) {\n      parts.push(path.get('callee'));\n      continue;\n    } else if (_astTypes.namedTypes.MemberExpression.check(node)) {\n      parts.push(path.get('object'));\n\n      if (node.computed) {\n        const resolvedPath = (0, _resolveToValue.default)(path.get('property'));\n\n        if (resolvedPath !== undefined) {\n          result = result.concat(toArray(resolvedPath));\n        } else {\n          result.push('<computed>');\n        }\n      } else {\n        result.push(node.property.name);\n      }\n\n      continue;\n    } else if (_astTypes.namedTypes.Identifier.check(node)) {\n      result.push(node.name);\n      continue;\n    } else if (_astTypes.namedTypes.Literal.check(node)) {\n      result.push(node.raw);\n      continue;\n    } else if (_astTypes.namedTypes.ThisExpression.check(node)) {\n      result.push('this');\n      continue;\n    } else if (_astTypes.namedTypes.ObjectExpression.check(node)) {\n      const properties = path.get('properties').map(function (property) {\n        return toString(property.get('key')) + ': ' + toString(property.get('value'));\n      });\n      result.push('{' + properties.join(', ') + '}');\n      continue;\n    } else if (_astTypes.namedTypes.ArrayExpression.check(node)) {\n      result.push('[' + path.get('elements').map(toString).join(', ') + ']');\n      continue;\n    }\n  }\n\n  return result.reverse();\n}\n/**\n * Creates a string representation of a member expression.\n */\n\n\nfunction toString(path) {\n  return toArray(path).join('.');\n}"]},"metadata":{},"sourceType":"script"}