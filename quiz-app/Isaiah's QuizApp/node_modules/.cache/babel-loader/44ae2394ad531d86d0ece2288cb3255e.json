{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveToModule;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _match = _interopRequireDefault(require(\"./match\"));\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Given a path (e.g. call expression, member expression or identifier),\n * this function tries to find the name of module from which the \"root value\"\n * was imported.\n */\n\n\nfunction resolveToModule(path) {\n  const node = path.node;\n\n  switch (node.type) {\n    case _astTypes.namedTypes.VariableDeclarator.name:\n      if (node.init) {\n        return resolveToModule(path.get('init'));\n      }\n\n      break;\n\n    case _astTypes.namedTypes.CallExpression.name:\n      if ((0, _match.default)(node.callee, {\n        type: _astTypes.namedTypes.Identifier.name,\n        name: 'require'\n      })) {\n        return node.arguments[0].value;\n      }\n\n      return resolveToModule(path.get('callee'));\n\n    case _astTypes.namedTypes.Identifier.name:\n    case _astTypes.namedTypes.JSXIdentifier.name:\n      {\n        const valuePath = (0, _resolveToValue.default)(path);\n\n        if (valuePath !== path) {\n          return resolveToModule(valuePath);\n        }\n\n        break;\n      }\n\n    case _astTypes.namedTypes.ImportDeclaration.name:\n      return node.source.value;\n\n    case _astTypes.namedTypes.MemberExpression.name:\n      while (path && _astTypes.namedTypes.MemberExpression.check(path.node)) {\n        path = path.get('object');\n      }\n\n      if (path) {\n        return resolveToModule(path);\n      }\n\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/resolveToModule.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","resolveToModule","_astTypes","_match","_resolveToValue","path","node","type","namedTypes","VariableDeclarator","name","init","get","CallExpression","callee","Identifier","arguments","JSXIdentifier","valuePath","ImportDeclaration","source","MemberExpression","check"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;;AAEA,IAAIC,SAAS,GAAGP,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIQ,MAAM,GAAGT,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEA,IAAIS,eAAe,GAAGV,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASM,eAAT,CAAyBI,IAAzB,EAA+B;AAC7B,QAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;;AAEA,UAAQA,IAAI,CAACC,IAAb;AACE,SAAKL,SAAS,CAACM,UAAV,CAAqBC,kBAArB,CAAwCC,IAA7C;AACE,UAAIJ,IAAI,CAACK,IAAT,EAAe;AACb,eAAOV,eAAe,CAACI,IAAI,CAACO,GAAL,CAAS,MAAT,CAAD,CAAtB;AACD;;AAED;;AAEF,SAAKV,SAAS,CAACM,UAAV,CAAqBK,cAArB,CAAoCH,IAAzC;AACE,UAAI,CAAC,GAAGP,MAAM,CAACH,OAAX,EAAoBM,IAAI,CAACQ,MAAzB,EAAiC;AACnCP,QAAAA,IAAI,EAAEL,SAAS,CAACM,UAAV,CAAqBO,UAArB,CAAgCL,IADH;AAEnCA,QAAAA,IAAI,EAAE;AAF6B,OAAjC,CAAJ,EAGI;AACF,eAAOJ,IAAI,CAACU,SAAL,CAAe,CAAf,EAAkBjB,KAAzB;AACD;;AAED,aAAOE,eAAe,CAACI,IAAI,CAACO,GAAL,CAAS,QAAT,CAAD,CAAtB;;AAEF,SAAKV,SAAS,CAACM,UAAV,CAAqBO,UAArB,CAAgCL,IAArC;AACA,SAAKR,SAAS,CAACM,UAAV,CAAqBS,aAArB,CAAmCP,IAAxC;AACE;AACE,cAAMQ,SAAS,GAAG,CAAC,GAAGd,eAAe,CAACJ,OAApB,EAA6BK,IAA7B,CAAlB;;AAEA,YAAIa,SAAS,KAAKb,IAAlB,EAAwB;AACtB,iBAAOJ,eAAe,CAACiB,SAAD,CAAtB;AACD;;AAED;AACD;;AAEH,SAAKhB,SAAS,CAACM,UAAV,CAAqBW,iBAArB,CAAuCT,IAA5C;AACE,aAAOJ,IAAI,CAACc,MAAL,CAAYrB,KAAnB;;AAEF,SAAKG,SAAS,CAACM,UAAV,CAAqBa,gBAArB,CAAsCX,IAA3C;AACE,aAAOL,IAAI,IAAIH,SAAS,CAACM,UAAV,CAAqBa,gBAArB,CAAsCC,KAAtC,CAA4CjB,IAAI,CAACC,IAAjD,CAAf,EAAuE;AACrED,QAAAA,IAAI,GAAGA,IAAI,CAACO,GAAL,CAAS,QAAT,CAAP;AACD;;AAED,UAAIP,IAAJ,EAAU;AACR,eAAOJ,eAAe,CAACI,IAAD,CAAtB;AACD;;AAxCL;;AA4CA,SAAO,IAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveToModule;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _match = _interopRequireDefault(require(\"./match\"));\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Given a path (e.g. call expression, member expression or identifier),\n * this function tries to find the name of module from which the \"root value\"\n * was imported.\n */\nfunction resolveToModule(path) {\n  const node = path.node;\n\n  switch (node.type) {\n    case _astTypes.namedTypes.VariableDeclarator.name:\n      if (node.init) {\n        return resolveToModule(path.get('init'));\n      }\n\n      break;\n\n    case _astTypes.namedTypes.CallExpression.name:\n      if ((0, _match.default)(node.callee, {\n        type: _astTypes.namedTypes.Identifier.name,\n        name: 'require'\n      })) {\n        return node.arguments[0].value;\n      }\n\n      return resolveToModule(path.get('callee'));\n\n    case _astTypes.namedTypes.Identifier.name:\n    case _astTypes.namedTypes.JSXIdentifier.name:\n      {\n        const valuePath = (0, _resolveToValue.default)(path);\n\n        if (valuePath !== path) {\n          return resolveToModule(valuePath);\n        }\n\n        break;\n      }\n\n    case _astTypes.namedTypes.ImportDeclaration.name:\n      return node.source.value;\n\n    case _astTypes.namedTypes.MemberExpression.name:\n      while (path && _astTypes.namedTypes.MemberExpression.check(path.node)) {\n        path = path.get('object');\n      }\n\n      if (path) {\n        return resolveToModule(path);\n      }\n\n  }\n\n  return null;\n}"]},"metadata":{},"sourceType":"script"}