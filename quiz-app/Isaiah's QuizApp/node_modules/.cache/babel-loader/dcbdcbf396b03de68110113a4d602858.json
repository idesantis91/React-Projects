{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseJsDoc;\n\nvar _doctrine = _interopRequireDefault(require(\"doctrine\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction getType(tagType) {\n  if (!tagType) {\n    return null;\n  }\n\n  const {\n    type,\n    name,\n    expression,\n    elements,\n    applications\n  } = tagType;\n\n  switch (type) {\n    case 'NameExpression':\n      // {a}\n      return {\n        name\n      };\n\n    case 'UnionType':\n      // {a|b}\n      return {\n        name: 'union',\n        elements: elements.map(element => getType(element))\n      };\n\n    case 'AllLiteral':\n      // {*}\n      return {\n        name: 'mixed'\n      };\n\n    case 'TypeApplication':\n      // {Array<string>} or {string[]}\n      return {\n        name: expression.name,\n        elements: applications.map(element => getType(element))\n      };\n\n    case 'ArrayType':\n      // {[number, string]}\n      return {\n        name: 'tuple',\n        elements: elements.map(element => getType(element))\n      };\n\n    default:\n      {\n        const typeName = name ? name : expression ? expression.name : null;\n\n        if (typeName) {\n          return {\n            name: typeName\n          };\n        } else {\n          return null;\n        }\n      }\n  }\n}\n\nfunction getOptional(tag) {\n  return !!(tag.type && tag.type.type && tag.type.type === 'OptionalType');\n} // Add jsdoc @return description.\n\n\nfunction getReturnsJsDoc(jsDoc) {\n  const returnTag = jsDoc.tags.find(tag => tag.title === 'return' || tag.title === 'returns');\n\n  if (returnTag) {\n    return {\n      description: returnTag.description,\n      type: getType(returnTag.type)\n    };\n  }\n\n  return null;\n} // Add jsdoc @param descriptions.\n\n\nfunction getParamsJsDoc(jsDoc) {\n  if (!jsDoc.tags) {\n    return [];\n  }\n\n  return jsDoc.tags.filter(tag => tag.title === 'param').map(tag => {\n    return {\n      name: tag.name,\n      description: tag.description,\n      type: getType(tag.type),\n      optional: getOptional(tag)\n    };\n  });\n}\n\nfunction parseJsDoc(docblock) {\n  const jsDoc = _doctrine.default.parse(docblock);\n\n  return {\n    description: jsDoc.description || null,\n    params: getParamsJsDoc(jsDoc),\n    returns: getReturnsJsDoc(jsDoc)\n  };\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/parseJsDoc.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","parseJsDoc","_doctrine","getType","tagType","type","name","expression","elements","applications","map","element","typeName","getOptional","tag","getReturnsJsDoc","jsDoc","returnTag","tags","find","title","description","getParamsJsDoc","filter","optional","docblock","parse","params","returns"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseJsDoc;\n\nvar _doctrine = _interopRequireDefault(require(\"doctrine\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction getType(tagType) {\n  if (!tagType) {\n    return null;\n  }\n\n  const {\n    type,\n    name,\n    expression,\n    elements,\n    applications\n  } = tagType;\n\n  switch (type) {\n    case 'NameExpression':\n      // {a}\n      return {\n        name\n      };\n\n    case 'UnionType':\n      // {a|b}\n      return {\n        name: 'union',\n        elements: elements.map(element => getType(element))\n      };\n\n    case 'AllLiteral':\n      // {*}\n      return {\n        name: 'mixed'\n      };\n\n    case 'TypeApplication':\n      // {Array<string>} or {string[]}\n      return {\n        name: expression.name,\n        elements: applications.map(element => getType(element))\n      };\n\n    case 'ArrayType':\n      // {[number, string]}\n      return {\n        name: 'tuple',\n        elements: elements.map(element => getType(element))\n      };\n\n    default:\n      {\n        const typeName = name ? name : expression ? expression.name : null;\n\n        if (typeName) {\n          return {\n            name: typeName\n          };\n        } else {\n          return null;\n        }\n      }\n  }\n}\n\nfunction getOptional(tag) {\n  return !!(tag.type && tag.type.type && tag.type.type === 'OptionalType');\n} // Add jsdoc @return description.\n\n\nfunction getReturnsJsDoc(jsDoc) {\n  const returnTag = jsDoc.tags.find(tag => tag.title === 'return' || tag.title === 'returns');\n\n  if (returnTag) {\n    return {\n      description: returnTag.description,\n      type: getType(returnTag.type)\n    };\n  }\n\n  return null;\n} // Add jsdoc @param descriptions.\n\n\nfunction getParamsJsDoc(jsDoc) {\n  if (!jsDoc.tags) {\n    return [];\n  }\n\n  return jsDoc.tags.filter(tag => tag.title === 'param').map(tag => {\n    return {\n      name: tag.name,\n      description: tag.description,\n      type: getType(tag.type),\n      optional: getOptional(tag)\n    };\n  });\n}\n\nfunction parseJsDoc(docblock) {\n  const jsDoc = _doctrine.default.parse(docblock);\n\n  return {\n    description: jsDoc.description || null,\n    params: getParamsJsDoc(jsDoc),\n    returns: getReturnsJsDoc(jsDoc)\n  };\n}"]},"metadata":{},"sourceType":"script"}