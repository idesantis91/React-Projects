{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveObjectToPropMap = resolveObjectToPropMap;\nexports.default = resolveObjectValuesToArray;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction isObjectValuesCall(node) {\n  return _astTypes.namedTypes.CallExpression.check(node) && node.arguments.length === 1 && _astTypes.namedTypes.MemberExpression.check(node.callee) && _astTypes.namedTypes.Identifier.check(node.callee.object) && node.callee.object.name === 'Object' && _astTypes.namedTypes.Identifier.check(node.callee.property) && node.callee.property.name === 'values';\n}\n\nfunction isWhitelistedObjectProperty(prop) {\n  return _astTypes.namedTypes.Property.check(prop) && (_astTypes.namedTypes.Identifier.check(prop.key) && !prop.computed || _astTypes.namedTypes.Literal.check(prop.key)) || _astTypes.namedTypes.SpreadElement.check(prop);\n}\n\nfunction isWhiteListedObjectTypeProperty(prop) {\n  return _astTypes.namedTypes.ObjectTypeProperty.check(prop) || _astTypes.namedTypes.ObjectTypeSpreadProperty.check(prop) || _astTypes.namedTypes.TSPropertySignature.check(prop);\n} // Resolves an ObjectExpression or an ObjectTypeAnnotation\n\n\nfunction resolveObjectToPropMap(object, raw = false) {\n  if (_astTypes.namedTypes.ObjectExpression.check(object.value) && object.value.properties.every(isWhitelistedObjectProperty) || _astTypes.namedTypes.ObjectTypeAnnotation.check(object.value) && object.value.properties.every(isWhiteListedObjectTypeProperty) || _astTypes.namedTypes.TSTypeLiteral.check(object.value) && object.value.members.every(isWhiteListedObjectTypeProperty)) {\n    const properties = [];\n    let values = {};\n    let error = false;\n    const members = _astTypes.namedTypes.TSTypeLiteral.check(object.value) ? object.get('members') : object.get('properties');\n    members.each(propPath => {\n      if (error) return;\n      const prop = propPath.value;\n      if (prop.kind === 'get' || prop.kind === 'set') return;\n\n      if (_astTypes.namedTypes.Property.check(prop) || _astTypes.namedTypes.ObjectTypeProperty.check(prop) || _astTypes.namedTypes.TSPropertySignature.check(prop)) {\n        // Key is either Identifier or Literal\n        const name = prop.key.name || (raw ? prop.key.raw : prop.key.value);\n        const propValue = propPath.get(name).parentPath.value;\n        const value = propValue.value.value || (raw ? propValue.value.raw : propValue.value.value);\n\n        if (properties.indexOf(name) === -1) {\n          properties.push(name);\n        }\n\n        values[name] = value;\n      } else if (_astTypes.namedTypes.SpreadElement.check(prop) || _astTypes.namedTypes.ObjectTypeSpreadProperty.check(prop)) {\n        let spreadObject = (0, _resolveToValue.default)(propPath.get('argument'));\n\n        if (_astTypes.namedTypes.GenericTypeAnnotation.check(spreadObject.value)) {\n          const typeAlias = (0, _resolveToValue.default)(spreadObject.get('id'));\n\n          if (_astTypes.namedTypes.ObjectTypeAnnotation.check(typeAlias.get('right').value)) {\n            spreadObject = (0, _resolveToValue.default)(typeAlias.get('right'));\n          }\n        }\n\n        const spreadValues = resolveObjectToPropMap(spreadObject);\n\n        if (!spreadValues) {\n          error = true;\n          return;\n        }\n\n        spreadValues.properties.forEach(spreadProp => {\n          if (properties.indexOf(spreadProp) === -1) {\n            properties.push(spreadProp);\n          }\n        });\n        values = { ...values,\n          ...spreadValues.values\n        };\n      }\n    });\n\n    if (!error) {\n      return {\n        properties: properties.sort(),\n        values\n      };\n    }\n  }\n\n  return null;\n}\n/**\n * Returns an ArrayExpression which contains all the values resolved from an object\n *\n * Ignores setters in objects\n *\n * Returns null in case of\n *  unresolvable spreads\n *  computed identifier values\n */\n\n\nfunction resolveObjectValuesToArray(path) {\n  const node = path.node;\n\n  if (isObjectValuesCall(node)) {\n    const objectExpression = (0, _resolveToValue.default)(path.get('arguments').get(0));\n    const propMap = resolveObjectToPropMap(objectExpression);\n\n    if (propMap) {\n      const nodes = propMap.properties.map(prop => {\n        const value = propMap.values[prop];\n        return typeof value === 'undefined' ? _astTypes.builders.literal(null) : _astTypes.builders.literal(value);\n      });\n      return new _astTypes.NodePath(_astTypes.builders.arrayExpression(nodes));\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/resolveObjectValuesToArray.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","resolveObjectToPropMap","default","resolveObjectValuesToArray","_astTypes","_resolveToValue","isObjectValuesCall","node","namedTypes","CallExpression","check","arguments","length","MemberExpression","callee","Identifier","object","name","property","isWhitelistedObjectProperty","prop","Property","key","computed","Literal","SpreadElement","isWhiteListedObjectTypeProperty","ObjectTypeProperty","ObjectTypeSpreadProperty","TSPropertySignature","raw","ObjectExpression","properties","every","ObjectTypeAnnotation","TSTypeLiteral","members","values","error","get","each","propPath","kind","propValue","parentPath","indexOf","push","spreadObject","GenericTypeAnnotation","typeAlias","spreadValues","forEach","spreadProp","sort","path","objectExpression","propMap","nodes","map","builders","literal","NodePath","arrayExpression"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveObjectToPropMap = resolveObjectToPropMap;\nexports.default = resolveObjectValuesToArray;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction isObjectValuesCall(node) {\n  return _astTypes.namedTypes.CallExpression.check(node) && node.arguments.length === 1 && _astTypes.namedTypes.MemberExpression.check(node.callee) && _astTypes.namedTypes.Identifier.check(node.callee.object) && node.callee.object.name === 'Object' && _astTypes.namedTypes.Identifier.check(node.callee.property) && node.callee.property.name === 'values';\n}\n\nfunction isWhitelistedObjectProperty(prop) {\n  return _astTypes.namedTypes.Property.check(prop) && (_astTypes.namedTypes.Identifier.check(prop.key) && !prop.computed || _astTypes.namedTypes.Literal.check(prop.key)) || _astTypes.namedTypes.SpreadElement.check(prop);\n}\n\nfunction isWhiteListedObjectTypeProperty(prop) {\n  return _astTypes.namedTypes.ObjectTypeProperty.check(prop) || _astTypes.namedTypes.ObjectTypeSpreadProperty.check(prop) || _astTypes.namedTypes.TSPropertySignature.check(prop);\n} // Resolves an ObjectExpression or an ObjectTypeAnnotation\n\n\nfunction resolveObjectToPropMap(object, raw = false) {\n  if (_astTypes.namedTypes.ObjectExpression.check(object.value) && object.value.properties.every(isWhitelistedObjectProperty) || _astTypes.namedTypes.ObjectTypeAnnotation.check(object.value) && object.value.properties.every(isWhiteListedObjectTypeProperty) || _astTypes.namedTypes.TSTypeLiteral.check(object.value) && object.value.members.every(isWhiteListedObjectTypeProperty)) {\n    const properties = [];\n    let values = {};\n    let error = false;\n    const members = _astTypes.namedTypes.TSTypeLiteral.check(object.value) ? object.get('members') : object.get('properties');\n    members.each(propPath => {\n      if (error) return;\n      const prop = propPath.value;\n      if (prop.kind === 'get' || prop.kind === 'set') return;\n\n      if (_astTypes.namedTypes.Property.check(prop) || _astTypes.namedTypes.ObjectTypeProperty.check(prop) || _astTypes.namedTypes.TSPropertySignature.check(prop)) {\n        // Key is either Identifier or Literal\n        const name = prop.key.name || (raw ? prop.key.raw : prop.key.value);\n        const propValue = propPath.get(name).parentPath.value;\n        const value = propValue.value.value || (raw ? propValue.value.raw : propValue.value.value);\n\n        if (properties.indexOf(name) === -1) {\n          properties.push(name);\n        }\n\n        values[name] = value;\n      } else if (_astTypes.namedTypes.SpreadElement.check(prop) || _astTypes.namedTypes.ObjectTypeSpreadProperty.check(prop)) {\n        let spreadObject = (0, _resolveToValue.default)(propPath.get('argument'));\n\n        if (_astTypes.namedTypes.GenericTypeAnnotation.check(spreadObject.value)) {\n          const typeAlias = (0, _resolveToValue.default)(spreadObject.get('id'));\n\n          if (_astTypes.namedTypes.ObjectTypeAnnotation.check(typeAlias.get('right').value)) {\n            spreadObject = (0, _resolveToValue.default)(typeAlias.get('right'));\n          }\n        }\n\n        const spreadValues = resolveObjectToPropMap(spreadObject);\n\n        if (!spreadValues) {\n          error = true;\n          return;\n        }\n\n        spreadValues.properties.forEach(spreadProp => {\n          if (properties.indexOf(spreadProp) === -1) {\n            properties.push(spreadProp);\n          }\n        });\n        values = { ...values,\n          ...spreadValues.values\n        };\n      }\n    });\n\n    if (!error) {\n      return {\n        properties: properties.sort(),\n        values\n      };\n    }\n  }\n\n  return null;\n}\n/**\n * Returns an ArrayExpression which contains all the values resolved from an object\n *\n * Ignores setters in objects\n *\n * Returns null in case of\n *  unresolvable spreads\n *  computed identifier values\n */\n\n\nfunction resolveObjectValuesToArray(path) {\n  const node = path.node;\n\n  if (isObjectValuesCall(node)) {\n    const objectExpression = (0, _resolveToValue.default)(path.get('arguments').get(0));\n    const propMap = resolveObjectToPropMap(objectExpression);\n\n    if (propMap) {\n      const nodes = propMap.properties.map(prop => {\n        const value = propMap.values[prop];\n        return typeof value === 'undefined' ? _astTypes.builders.literal(null) : _astTypes.builders.literal(value);\n      });\n      return new _astTypes.NodePath(_astTypes.builders.arrayExpression(nodes));\n    }\n  }\n\n  return null;\n}"]},"metadata":{},"sourceType":"script"}