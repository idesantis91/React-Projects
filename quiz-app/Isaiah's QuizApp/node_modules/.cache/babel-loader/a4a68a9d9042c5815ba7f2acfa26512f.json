{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = printValue;\n\nvar _stripIndent = _interopRequireDefault(require(\"strip-indent\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction deindent(code) {\n  const firstNewLine = code.indexOf('\\n');\n  return code.slice(0, firstNewLine + 1) + // remove indentation from all lines except first.\n  (0, _stripIndent.default)(code.slice(firstNewLine + 1));\n}\n\nfunction getSrcFromAst(path) {\n  do {\n    if (path.node.type === 'File') {\n      return path.node.__src;\n    }\n\n    path = path.parentPath;\n  } while (path != null);\n\n  throw new Error('Could not find source attached to File node');\n}\n/**\n * Prints the given path without leading or trailing comments.\n */\n\n\nfunction printValue(path) {\n  if (path.node.start == null) {\n    // This only happens when we use AST builders to create nodes that do not actually\n    // exist in the source (e.g. when resolving Object.keys()). We might need to enhance\n    // this if we start using builders from `ast-types` more.\n    if (path.node.type === 'Literal') {\n      return `\"${path.node.value}\"`;\n    }\n\n    throw new Error(`Cannot print raw value for type '${path.node.type}'. Please report this with an example at https://github.com/reactjs/react-docgen/issues`);\n  }\n\n  const src = getSrcFromAst(path);\n  return deindent(src.slice(path.node.start, path.node.end));\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/printValue.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","printValue","_stripIndent","deindent","code","firstNewLine","indexOf","slice","getSrcFromAst","path","node","type","__src","parentPath","Error","start","src","end"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;;AAEA,IAAIC,YAAY,GAAGR,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAMC,YAAY,GAAGD,IAAI,CAACE,OAAL,CAAa,IAAb,CAArB;AACA,SAAOF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcF,YAAY,GAAG,CAA7B,IAAkC;AACzC,GAAC,GAAGH,YAAY,CAACF,OAAjB,EAA0BI,IAAI,CAACG,KAAL,CAAWF,YAAY,GAAG,CAA1B,CAA1B,CADA;AAED;;AAED,SAASG,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,KAAG;AACD,QAAIA,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,MAAvB,EAA+B;AAC7B,aAAOF,IAAI,CAACC,IAAL,CAAUE,KAAjB;AACD;;AAEDH,IAAAA,IAAI,GAAGA,IAAI,CAACI,UAAZ;AACD,GAND,QAMSJ,IAAI,IAAI,IANjB;;AAQA,QAAM,IAAIK,KAAJ,CAAU,6CAAV,CAAN;AACD;AACD;AACA;AACA;;;AAGA,SAASb,UAAT,CAAoBQ,IAApB,EAA0B;AACxB,MAAIA,IAAI,CAACC,IAAL,CAAUK,KAAV,IAAmB,IAAvB,EAA6B;AAC3B;AACA;AACA;AACA,QAAIN,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,SAAvB,EAAkC;AAChC,aAAQ,IAAGF,IAAI,CAACC,IAAL,CAAUX,KAAM,GAA3B;AACD;;AAED,UAAM,IAAIe,KAAJ,CAAW,oCAAmCL,IAAI,CAACC,IAAL,CAAUC,IAAK,yFAA7D,CAAN;AACD;;AAED,QAAMK,GAAG,GAAGR,aAAa,CAACC,IAAD,CAAzB;AACA,SAAON,QAAQ,CAACa,GAAG,CAACT,KAAJ,CAAUE,IAAI,CAACC,IAAL,CAAUK,KAApB,EAA2BN,IAAI,CAACC,IAAL,CAAUO,GAArC,CAAD,CAAf;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = printValue;\n\nvar _stripIndent = _interopRequireDefault(require(\"strip-indent\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction deindent(code) {\n  const firstNewLine = code.indexOf('\\n');\n  return code.slice(0, firstNewLine + 1) + // remove indentation from all lines except first.\n  (0, _stripIndent.default)(code.slice(firstNewLine + 1));\n}\n\nfunction getSrcFromAst(path) {\n  do {\n    if (path.node.type === 'File') {\n      return path.node.__src;\n    }\n\n    path = path.parentPath;\n  } while (path != null);\n\n  throw new Error('Could not find source attached to File node');\n}\n/**\n * Prints the given path without leading or trailing comments.\n */\n\n\nfunction printValue(path) {\n  if (path.node.start == null) {\n    // This only happens when we use AST builders to create nodes that do not actually\n    // exist in the source (e.g. when resolving Object.keys()). We might need to enhance\n    // this if we start using builders from `ast-types` more.\n    if (path.node.type === 'Literal') {\n      return `\"${path.node.value}\"`;\n    }\n\n    throw new Error(`Cannot print raw value for type '${path.node.type}'. Please report this with an example at https://github.com/reactjs/react-docgen/issues`);\n  }\n\n  const src = getSrcFromAst(path);\n  return deindent(src.slice(path.node.start, path.node.end));\n}"]},"metadata":{},"sourceType":"script"}