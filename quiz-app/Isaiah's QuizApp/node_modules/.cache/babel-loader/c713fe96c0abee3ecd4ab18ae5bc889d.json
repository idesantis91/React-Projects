{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _getPropertyName = _interopRequireDefault(require(\"./getPropertyName\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nconst componentMethods = ['componentDidMount', 'componentDidReceiveProps', 'componentDidUpdate', 'componentWillMount', 'UNSAFE_componentWillMount', 'componentWillReceiveProps', 'UNSAFE_componentWillReceiveProps', 'componentWillUnmount', 'componentWillUpdate', 'UNSAFE_componentWillUpdate', 'getChildContext', 'getDefaultProps', 'getInitialState', 'render', 'shouldComponentUpdate', 'getDerivedStateFromProps', 'getDerivedStateFromError', 'getSnapshotBeforeUpdate', 'componentDidCatch'];\n/**\n * Returns if the method path is a Component method.\n */\n\nfunction _default(methodPath) {\n  if (!_astTypes.namedTypes.MethodDefinition.check(methodPath.node) && !_astTypes.namedTypes.Property.check(methodPath.node)) {\n    return false;\n  }\n\n  const name = (0, _getPropertyName.default)(methodPath);\n  return !!name && componentMethods.indexOf(name) !== -1;\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/isReactComponentMethod.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_default","_astTypes","_getPropertyName","componentMethods","methodPath","namedTypes","MethodDefinition","check","node","Property","name","indexOf"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,SAAS,GAAGP,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIQ,gBAAgB,GAAGT,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMS,gBAAgB,GAAG,CAAC,mBAAD,EAAsB,0BAAtB,EAAkD,oBAAlD,EAAwE,oBAAxE,EAA8F,2BAA9F,EAA2H,2BAA3H,EAAwJ,kCAAxJ,EAA4L,sBAA5L,EAAoN,qBAApN,EAA2O,4BAA3O,EAAyQ,iBAAzQ,EAA4R,iBAA5R,EAA+S,iBAA/S,EAAkU,QAAlU,EAA4U,uBAA5U,EAAqW,0BAArW,EAAiY,0BAAjY,EAA6Z,yBAA7Z,EAAwb,mBAAxb,CAAzB;AACA;AACA;AACA;;AAEA,SAASH,QAAT,CAAkBI,UAAlB,EAA8B;AAC5B,MAAI,CAACH,SAAS,CAACI,UAAV,CAAqBC,gBAArB,CAAsCC,KAAtC,CAA4CH,UAAU,CAACI,IAAvD,CAAD,IAAiE,CAACP,SAAS,CAACI,UAAV,CAAqBI,QAArB,CAA8BF,KAA9B,CAAoCH,UAAU,CAACI,IAA/C,CAAtE,EAA4H;AAC1H,WAAO,KAAP;AACD;;AAED,QAAME,IAAI,GAAG,CAAC,GAAGR,gBAAgB,CAACH,OAArB,EAA8BK,UAA9B,CAAb;AACA,SAAO,CAAC,CAACM,IAAF,IAAUP,gBAAgB,CAACQ,OAAjB,CAAyBD,IAAzB,MAAmC,CAAC,CAArD;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _getPropertyName = _interopRequireDefault(require(\"./getPropertyName\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst componentMethods = ['componentDidMount', 'componentDidReceiveProps', 'componentDidUpdate', 'componentWillMount', 'UNSAFE_componentWillMount', 'componentWillReceiveProps', 'UNSAFE_componentWillReceiveProps', 'componentWillUnmount', 'componentWillUpdate', 'UNSAFE_componentWillUpdate', 'getChildContext', 'getDefaultProps', 'getInitialState', 'render', 'shouldComponentUpdate', 'getDerivedStateFromProps', 'getDerivedStateFromError', 'getSnapshotBeforeUpdate', 'componentDidCatch'];\n/**\n * Returns if the method path is a Component method.\n */\n\nfunction _default(methodPath) {\n  if (!_astTypes.namedTypes.MethodDefinition.check(methodPath.node) && !_astTypes.namedTypes.Property.check(methodPath.node)) {\n    return false;\n  }\n\n  const name = (0, _getPropertyName.default)(methodPath);\n  return !!name && componentMethods.indexOf(name) !== -1;\n}"]},"metadata":{},"sourceType":"script"}