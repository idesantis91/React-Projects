{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveGenericTypeAnnotation;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _isUnreachableFlowType = _interopRequireDefault(require(\"../utils/isUnreachableFlowType\"));\n\nvar _resolveToValue = _interopRequireDefault(require(\"../utils/resolveToValue\"));\n\nvar _flowUtilityTypes = require(\"./flowUtilityTypes\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction tryResolveGenericTypeAnnotation(path) {\n  let typePath = (0, _flowUtilityTypes.unwrapUtilityType)(path);\n  let idPath;\n\n  if (typePath.node.id) {\n    idPath = typePath.get('id');\n  } else if (_astTypes.namedTypes.TSTypeReference.check(typePath.node)) {\n    idPath = typePath.get('typeName');\n  } else if (_astTypes.namedTypes.TSExpressionWithTypeArguments.check(typePath.node)) {\n    idPath = typePath.get('expression');\n  }\n\n  if (idPath) {\n    typePath = (0, _resolveToValue.default)(idPath);\n\n    if ((0, _isUnreachableFlowType.default)(typePath)) {\n      return;\n    }\n\n    if (_astTypes.namedTypes.TypeAlias.check(typePath.node)) {\n      return tryResolveGenericTypeAnnotation(typePath.get('right'));\n    } else if (_astTypes.namedTypes.TSTypeAliasDeclaration.check(typePath.node)) {\n      return tryResolveGenericTypeAnnotation(typePath.get('typeAnnotation'));\n    }\n\n    return typePath;\n  }\n\n  return typePath;\n}\n/**\n * Given an React component (stateless or class) tries to find the\n * flow type for the props. If not found or not one of the supported\n * component types returns undefined.\n */\n\n\nfunction resolveGenericTypeAnnotation(path) {\n  if (!path) return;\n  const typePath = tryResolveGenericTypeAnnotation(path);\n  if (!typePath || typePath === path) return;\n  return typePath;\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/resolveGenericTypeAnnotation.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","resolveGenericTypeAnnotation","_astTypes","_isUnreachableFlowType","_resolveToValue","_flowUtilityTypes","tryResolveGenericTypeAnnotation","path","typePath","unwrapUtilityType","idPath","node","id","get","namedTypes","TSTypeReference","check","TSExpressionWithTypeArguments","TypeAlias","TSTypeAliasDeclaration"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,4BAAlB;;AAEA,IAAIC,SAAS,GAAGP,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIQ,sBAAsB,GAAGT,sBAAsB,CAACC,OAAO,CAAC,gCAAD,CAAR,CAAnD;;AAEA,IAAIS,eAAe,GAAGV,sBAAsB,CAACC,OAAO,CAAC,yBAAD,CAAR,CAA5C;;AAEA,IAAIU,iBAAiB,GAAGV,OAAO,CAAC,oBAAD,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,+BAAT,CAAyCC,IAAzC,EAA+C;AAC7C,MAAIC,QAAQ,GAAG,CAAC,GAAGH,iBAAiB,CAACI,iBAAtB,EAAyCF,IAAzC,CAAf;AACA,MAAIG,MAAJ;;AAEA,MAAIF,QAAQ,CAACG,IAAT,CAAcC,EAAlB,EAAsB;AACpBF,IAAAA,MAAM,GAAGF,QAAQ,CAACK,GAAT,CAAa,IAAb,CAAT;AACD,GAFD,MAEO,IAAIX,SAAS,CAACY,UAAV,CAAqBC,eAArB,CAAqCC,KAArC,CAA2CR,QAAQ,CAACG,IAApD,CAAJ,EAA+D;AACpED,IAAAA,MAAM,GAAGF,QAAQ,CAACK,GAAT,CAAa,UAAb,CAAT;AACD,GAFM,MAEA,IAAIX,SAAS,CAACY,UAAV,CAAqBG,6BAArB,CAAmDD,KAAnD,CAAyDR,QAAQ,CAACG,IAAlE,CAAJ,EAA6E;AAClFD,IAAAA,MAAM,GAAGF,QAAQ,CAACK,GAAT,CAAa,YAAb,CAAT;AACD;;AAED,MAAIH,MAAJ,EAAY;AACVF,IAAAA,QAAQ,GAAG,CAAC,GAAGJ,eAAe,CAACJ,OAApB,EAA6BU,MAA7B,CAAX;;AAEA,QAAI,CAAC,GAAGP,sBAAsB,CAACH,OAA3B,EAAoCQ,QAApC,CAAJ,EAAmD;AACjD;AACD;;AAED,QAAIN,SAAS,CAACY,UAAV,CAAqBI,SAArB,CAA+BF,KAA/B,CAAqCR,QAAQ,CAACG,IAA9C,CAAJ,EAAyD;AACvD,aAAOL,+BAA+B,CAACE,QAAQ,CAACK,GAAT,CAAa,OAAb,CAAD,CAAtC;AACD,KAFD,MAEO,IAAIX,SAAS,CAACY,UAAV,CAAqBK,sBAArB,CAA4CH,KAA5C,CAAkDR,QAAQ,CAACG,IAA3D,CAAJ,EAAsE;AAC3E,aAAOL,+BAA+B,CAACE,QAAQ,CAACK,GAAT,CAAa,gBAAb,CAAD,CAAtC;AACD;;AAED,WAAOL,QAAP;AACD;;AAED,SAAOA,QAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASP,4BAAT,CAAsCM,IAAtC,EAA4C;AAC1C,MAAI,CAACA,IAAL,EAAW;AACX,QAAMC,QAAQ,GAAGF,+BAA+B,CAACC,IAAD,CAAhD;AACA,MAAI,CAACC,QAAD,IAAaA,QAAQ,KAAKD,IAA9B,EAAoC;AACpC,SAAOC,QAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveGenericTypeAnnotation;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _isUnreachableFlowType = _interopRequireDefault(require(\"../utils/isUnreachableFlowType\"));\n\nvar _resolveToValue = _interopRequireDefault(require(\"../utils/resolveToValue\"));\n\nvar _flowUtilityTypes = require(\"./flowUtilityTypes\");\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction tryResolveGenericTypeAnnotation(path) {\n  let typePath = (0, _flowUtilityTypes.unwrapUtilityType)(path);\n  let idPath;\n\n  if (typePath.node.id) {\n    idPath = typePath.get('id');\n  } else if (_astTypes.namedTypes.TSTypeReference.check(typePath.node)) {\n    idPath = typePath.get('typeName');\n  } else if (_astTypes.namedTypes.TSExpressionWithTypeArguments.check(typePath.node)) {\n    idPath = typePath.get('expression');\n  }\n\n  if (idPath) {\n    typePath = (0, _resolveToValue.default)(idPath);\n\n    if ((0, _isUnreachableFlowType.default)(typePath)) {\n      return;\n    }\n\n    if (_astTypes.namedTypes.TypeAlias.check(typePath.node)) {\n      return tryResolveGenericTypeAnnotation(typePath.get('right'));\n    } else if (_astTypes.namedTypes.TSTypeAliasDeclaration.check(typePath.node)) {\n      return tryResolveGenericTypeAnnotation(typePath.get('typeAnnotation'));\n    }\n\n    return typePath;\n  }\n\n  return typePath;\n}\n/**\n * Given an React component (stateless or class) tries to find the\n * flow type for the props. If not found or not one of the supported\n * component types returns undefined.\n */\n\n\nfunction resolveGenericTypeAnnotation(path) {\n  if (!path) return;\n  const typePath = tryResolveGenericTypeAnnotation(path);\n  if (!typePath || typePath === path) return;\n  return typePath;\n}"]},"metadata":{},"sourceType":"script"}