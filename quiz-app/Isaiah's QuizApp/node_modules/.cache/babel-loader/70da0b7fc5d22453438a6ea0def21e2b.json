{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flowTypeHandler;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _flowUtilityTypes = require(\"../utils/flowUtilityTypes\");\n\nvar _getFlowType = _interopRequireDefault(require(\"../utils/getFlowType\"));\n\nvar _getFlowTypeFromReactComponent = _interopRequireWildcard(require(\"../utils/getFlowTypeFromReactComponent\"));\n\nvar _getPropertyName = _interopRequireDefault(require(\"../utils/getPropertyName\"));\n\nvar _getTSType = _interopRequireDefault(require(\"../utils/getTSType\"));\n\nvar _resolveToValue = _interopRequireDefault(require(\"../utils/resolveToValue\"));\n\nvar _setPropDescription = _interopRequireDefault(require(\"../utils/setPropDescription\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction setPropDescriptor(documentation, path, typeParams) {\n  if (_astTypes.namedTypes.ObjectTypeSpreadProperty.check(path.node)) {\n    const argument = (0, _flowUtilityTypes.unwrapUtilityType)(path.get('argument'));\n\n    if (_astTypes.namedTypes.ObjectTypeAnnotation.check(argument.node)) {\n      (0, _getFlowTypeFromReactComponent.applyToFlowTypeProperties)(documentation, argument, (propertyPath, innerTypeParams) => {\n        setPropDescriptor(documentation, propertyPath, innerTypeParams);\n      }, typeParams);\n      return;\n    }\n\n    const name = argument.get('id').get('name');\n    const resolvedPath = (0, _resolveToValue.default)(name);\n\n    if (resolvedPath && _astTypes.namedTypes.TypeAlias.check(resolvedPath.node)) {\n      const right = resolvedPath.get('right');\n      (0, _getFlowTypeFromReactComponent.applyToFlowTypeProperties)(documentation, right, (propertyPath, innerTypeParams) => {\n        setPropDescriptor(documentation, propertyPath, innerTypeParams);\n      }, typeParams);\n    } else {\n      documentation.addComposes(name.node.name);\n    }\n  } else if (_astTypes.namedTypes.ObjectTypeProperty.check(path.node)) {\n    const type = (0, _getFlowType.default)(path.get('value'), typeParams);\n    const propName = (0, _getPropertyName.default)(path);\n    if (!propName) return;\n    const propDescriptor = documentation.getPropDescriptor(propName);\n    propDescriptor.required = !path.node.optional;\n    propDescriptor.flowType = type; // We are doing this here instead of in a different handler\n    // to not need to duplicate the logic for checking for\n    // imported types that are spread in to props.\n\n    (0, _setPropDescription.default)(documentation, path);\n  } else if (_astTypes.namedTypes.TSPropertySignature.check(path.node)) {\n    const type = (0, _getTSType.default)(path.get('typeAnnotation'), typeParams);\n    const propName = (0, _getPropertyName.default)(path);\n    if (!propName) return;\n    const propDescriptor = documentation.getPropDescriptor(propName);\n    propDescriptor.required = !path.node.optional;\n    propDescriptor.tsType = type; // We are doing this here instead of in a different handler\n    // to not need to duplicate the logic for checking for\n    // imported types that are spread in to props.\n\n    (0, _setPropDescription.default)(documentation, path);\n  }\n}\n/**\n * This handler tries to find flow Type annotated react components and extract\n * its types to the documentation. It also extracts docblock comments which are\n * inlined in the type definition.\n */\n\n\nfunction flowTypeHandler(documentation, path) {\n  const flowTypesPath = (0, _getFlowTypeFromReactComponent.default)(path);\n\n  if (!flowTypesPath) {\n    return;\n  }\n\n  (0, _getFlowTypeFromReactComponent.applyToFlowTypeProperties)(documentation, flowTypesPath, (propertyPath, typeParams) => {\n    setPropDescriptor(documentation, propertyPath, typeParams);\n  });\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/handlers/flowTypeHandler.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","flowTypeHandler","_astTypes","_flowUtilityTypes","_getFlowType","_getFlowTypeFromReactComponent","_getPropertyName","_getTSType","_resolveToValue","_setPropDescription","setPropDescriptor","documentation","path","typeParams","namedTypes","ObjectTypeSpreadProperty","check","node","argument","unwrapUtilityType","get","ObjectTypeAnnotation","applyToFlowTypeProperties","propertyPath","innerTypeParams","name","resolvedPath","TypeAlias","right","addComposes","ObjectTypeProperty","type","propName","propDescriptor","getPropDescriptor","required","optional","flowType","TSPropertySignature","tsType","flowTypesPath"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flowTypeHandler;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _flowUtilityTypes = require(\"../utils/flowUtilityTypes\");\n\nvar _getFlowType = _interopRequireDefault(require(\"../utils/getFlowType\"));\n\nvar _getFlowTypeFromReactComponent = _interopRequireWildcard(require(\"../utils/getFlowTypeFromReactComponent\"));\n\nvar _getPropertyName = _interopRequireDefault(require(\"../utils/getPropertyName\"));\n\nvar _getTSType = _interopRequireDefault(require(\"../utils/getTSType\"));\n\nvar _resolveToValue = _interopRequireDefault(require(\"../utils/resolveToValue\"));\n\nvar _setPropDescription = _interopRequireDefault(require(\"../utils/setPropDescription\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction setPropDescriptor(documentation, path, typeParams) {\n  if (_astTypes.namedTypes.ObjectTypeSpreadProperty.check(path.node)) {\n    const argument = (0, _flowUtilityTypes.unwrapUtilityType)(path.get('argument'));\n\n    if (_astTypes.namedTypes.ObjectTypeAnnotation.check(argument.node)) {\n      (0, _getFlowTypeFromReactComponent.applyToFlowTypeProperties)(documentation, argument, (propertyPath, innerTypeParams) => {\n        setPropDescriptor(documentation, propertyPath, innerTypeParams);\n      }, typeParams);\n      return;\n    }\n\n    const name = argument.get('id').get('name');\n    const resolvedPath = (0, _resolveToValue.default)(name);\n\n    if (resolvedPath && _astTypes.namedTypes.TypeAlias.check(resolvedPath.node)) {\n      const right = resolvedPath.get('right');\n      (0, _getFlowTypeFromReactComponent.applyToFlowTypeProperties)(documentation, right, (propertyPath, innerTypeParams) => {\n        setPropDescriptor(documentation, propertyPath, innerTypeParams);\n      }, typeParams);\n    } else {\n      documentation.addComposes(name.node.name);\n    }\n  } else if (_astTypes.namedTypes.ObjectTypeProperty.check(path.node)) {\n    const type = (0, _getFlowType.default)(path.get('value'), typeParams);\n    const propName = (0, _getPropertyName.default)(path);\n    if (!propName) return;\n    const propDescriptor = documentation.getPropDescriptor(propName);\n    propDescriptor.required = !path.node.optional;\n    propDescriptor.flowType = type; // We are doing this here instead of in a different handler\n    // to not need to duplicate the logic for checking for\n    // imported types that are spread in to props.\n\n    (0, _setPropDescription.default)(documentation, path);\n  } else if (_astTypes.namedTypes.TSPropertySignature.check(path.node)) {\n    const type = (0, _getTSType.default)(path.get('typeAnnotation'), typeParams);\n    const propName = (0, _getPropertyName.default)(path);\n    if (!propName) return;\n    const propDescriptor = documentation.getPropDescriptor(propName);\n    propDescriptor.required = !path.node.optional;\n    propDescriptor.tsType = type; // We are doing this here instead of in a different handler\n    // to not need to duplicate the logic for checking for\n    // imported types that are spread in to props.\n\n    (0, _setPropDescription.default)(documentation, path);\n  }\n}\n/**\n * This handler tries to find flow Type annotated react components and extract\n * its types to the documentation. It also extracts docblock comments which are\n * inlined in the type definition.\n */\n\n\nfunction flowTypeHandler(documentation, path) {\n  const flowTypesPath = (0, _getFlowTypeFromReactComponent.default)(path);\n\n  if (!flowTypesPath) {\n    return;\n  }\n\n  (0, _getFlowTypeFromReactComponent.applyToFlowTypeProperties)(documentation, flowTypesPath, (propertyPath, typeParams) => {\n    setPropDescriptor(documentation, propertyPath, typeParams);\n  });\n}"]},"metadata":{},"sourceType":"script"}