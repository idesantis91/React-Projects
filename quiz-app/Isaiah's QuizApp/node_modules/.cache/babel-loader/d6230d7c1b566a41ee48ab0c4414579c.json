{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPropertyName;\nexports.COMPUTED_PREFIX = void 0;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _getNameOrValue = _interopRequireDefault(require(\"./getNameOrValue\"));\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nconst COMPUTED_PREFIX = '@computed#';\n/**\n * In an ObjectExpression, the name of a property can either be an identifier\n * or a literal (or dynamic, but we don't support those). This function simply\n * returns the value of the literal or name of the identifier.\n */\n\nexports.COMPUTED_PREFIX = COMPUTED_PREFIX;\n\nfunction getPropertyName(propertyPath) {\n  if (_astTypes.namedTypes.ObjectTypeSpreadProperty.check(propertyPath.node)) {\n    return (0, _getNameOrValue.default)(propertyPath.get('argument').get('id'), false);\n  } else if (propertyPath.node.computed) {\n    const key = propertyPath.get('key'); // Try to resolve variables and member expressions\n\n    if (_astTypes.namedTypes.Identifier.check(key.node) || _astTypes.namedTypes.MemberExpression.check(key.node)) {\n      const value = (0, _resolveToValue.default)(key).node;\n\n      if (_astTypes.namedTypes.Literal.check(value) && (typeof value.value === 'string' || typeof value.value === 'number')) {\n        return `${value.value}`;\n      }\n    } // generate name for identifier\n\n\n    if (_astTypes.namedTypes.Identifier.check(key.node)) {\n      return `${COMPUTED_PREFIX}${key.node.name}`;\n    }\n\n    if (_astTypes.namedTypes.Literal.check(key.node) && (typeof key.node.value === 'string' || typeof key.node.value === 'number')) {\n      return `${key.node.value}`;\n    }\n\n    return null;\n  }\n\n  return (0, _getNameOrValue.default)(propertyPath.get('key'), false);\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/getPropertyName.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","getPropertyName","COMPUTED_PREFIX","_astTypes","_getNameOrValue","_resolveToValue","propertyPath","namedTypes","ObjectTypeSpreadProperty","check","node","get","computed","key","Identifier","MemberExpression","Literal","name"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;AACAH,OAAO,CAACI,eAAR,GAA0B,KAAK,CAA/B;;AAEA,IAAIC,SAAS,GAAGR,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIS,eAAe,GAAGV,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA5C;;AAEA,IAAIU,eAAe,GAAGX,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,eAAe,GAAG,YAAxB;AACA;AACA;AACA;AACA;AACA;;AAEAJ,OAAO,CAACI,eAAR,GAA0BA,eAA1B;;AAEA,SAASD,eAAT,CAAyBK,YAAzB,EAAuC;AACrC,MAAIH,SAAS,CAACI,UAAV,CAAqBC,wBAArB,CAA8CC,KAA9C,CAAoDH,YAAY,CAACI,IAAjE,CAAJ,EAA4E;AAC1E,WAAO,CAAC,GAAGN,eAAe,CAACJ,OAApB,EAA6BM,YAAY,CAACK,GAAb,CAAiB,UAAjB,EAA6BA,GAA7B,CAAiC,IAAjC,CAA7B,EAAqE,KAArE,CAAP;AACD,GAFD,MAEO,IAAIL,YAAY,CAACI,IAAb,CAAkBE,QAAtB,EAAgC;AACrC,UAAMC,GAAG,GAAGP,YAAY,CAACK,GAAb,CAAiB,KAAjB,CAAZ,CADqC,CACA;;AAErC,QAAIR,SAAS,CAACI,UAAV,CAAqBO,UAArB,CAAgCL,KAAhC,CAAsCI,GAAG,CAACH,IAA1C,KAAmDP,SAAS,CAACI,UAAV,CAAqBQ,gBAArB,CAAsCN,KAAtC,CAA4CI,GAAG,CAACH,IAAhD,CAAvD,EAA8G;AAC5G,YAAMX,KAAK,GAAG,CAAC,GAAGM,eAAe,CAACL,OAApB,EAA6Ba,GAA7B,EAAkCH,IAAhD;;AAEA,UAAIP,SAAS,CAACI,UAAV,CAAqBS,OAArB,CAA6BP,KAA7B,CAAmCV,KAAnC,MAA8C,OAAOA,KAAK,CAACA,KAAb,KAAuB,QAAvB,IAAmC,OAAOA,KAAK,CAACA,KAAb,KAAuB,QAAxG,CAAJ,EAAuH;AACrH,eAAQ,GAAEA,KAAK,CAACA,KAAM,EAAtB;AACD;AACF,KAToC,CASnC;;;AAGF,QAAII,SAAS,CAACI,UAAV,CAAqBO,UAArB,CAAgCL,KAAhC,CAAsCI,GAAG,CAACH,IAA1C,CAAJ,EAAqD;AACnD,aAAQ,GAAER,eAAgB,GAAEW,GAAG,CAACH,IAAJ,CAASO,IAAK,EAA1C;AACD;;AAED,QAAId,SAAS,CAACI,UAAV,CAAqBS,OAArB,CAA6BP,KAA7B,CAAmCI,GAAG,CAACH,IAAvC,MAAiD,OAAOG,GAAG,CAACH,IAAJ,CAASX,KAAhB,KAA0B,QAA1B,IAAsC,OAAOc,GAAG,CAACH,IAAJ,CAASX,KAAhB,KAA0B,QAAjH,CAAJ,EAAgI;AAC9H,aAAQ,GAAEc,GAAG,CAACH,IAAJ,CAASX,KAAM,EAAzB;AACD;;AAED,WAAO,IAAP;AACD;;AAED,SAAO,CAAC,GAAGK,eAAe,CAACJ,OAApB,EAA6BM,YAAY,CAACK,GAAb,CAAiB,KAAjB,CAA7B,EAAsD,KAAtD,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPropertyName;\nexports.COMPUTED_PREFIX = void 0;\n\nvar _astTypes = require(\"ast-types\");\n\nvar _getNameOrValue = _interopRequireDefault(require(\"./getNameOrValue\"));\n\nvar _resolveToValue = _interopRequireDefault(require(\"./resolveToValue\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst COMPUTED_PREFIX = '@computed#';\n/**\n * In an ObjectExpression, the name of a property can either be an identifier\n * or a literal (or dynamic, but we don't support those). This function simply\n * returns the value of the literal or name of the identifier.\n */\n\nexports.COMPUTED_PREFIX = COMPUTED_PREFIX;\n\nfunction getPropertyName(propertyPath) {\n  if (_astTypes.namedTypes.ObjectTypeSpreadProperty.check(propertyPath.node)) {\n    return (0, _getNameOrValue.default)(propertyPath.get('argument').get('id'), false);\n  } else if (propertyPath.node.computed) {\n    const key = propertyPath.get('key'); // Try to resolve variables and member expressions\n\n    if (_astTypes.namedTypes.Identifier.check(key.node) || _astTypes.namedTypes.MemberExpression.check(key.node)) {\n      const value = (0, _resolveToValue.default)(key).node;\n\n      if (_astTypes.namedTypes.Literal.check(value) && (typeof value.value === 'string' || typeof value.value === 'number')) {\n        return `${value.value}`;\n      }\n    } // generate name for identifier\n\n\n    if (_astTypes.namedTypes.Identifier.check(key.node)) {\n      return `${COMPUTED_PREFIX}${key.node.name}`;\n    }\n\n    if (_astTypes.namedTypes.Literal.check(key.node) && (typeof key.node.value === 'string' || typeof key.node.value === 'number')) {\n      return `${key.node.value}`;\n    }\n\n    return null;\n  }\n\n  return (0, _getNameOrValue.default)(propertyPath.get('key'), false);\n}"]},"metadata":{},"sourceType":"script"}