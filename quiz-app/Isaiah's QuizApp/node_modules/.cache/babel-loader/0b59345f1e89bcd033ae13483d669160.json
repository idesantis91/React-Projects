{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = buildParse;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nconst babel = require('@babel/core');\n\nconst path = require('path');\n\nconst TYPESCRIPT_EXTS = {\n  '.ts': true,\n  '.tsx': true\n};\n\nfunction getDefaultPlugins(options) {\n  return ['jsx', TYPESCRIPT_EXTS[path.extname(options.filename || '')] ? 'typescript' : 'flow', 'asyncGenerators', 'bigInt', 'classProperties', 'classPrivateProperties', 'classPrivateMethods', ['decorators', {\n    decoratorsBeforeExport: false\n  }], 'doExpressions', 'dynamicImport', 'exportDefaultFrom', 'exportNamespaceFrom', 'functionBind', 'functionSent', 'importMeta', 'logicalAssignment', 'nullishCoalescingOperator', 'numericSeparator', 'objectRestSpread', 'optionalCatchBinding', 'optionalChaining', ['pipelineOperator', {\n    proposal: 'minimal'\n  }], 'throwExpressions', 'topLevelAwait'];\n}\n\nfunction buildOptions(parserOptions, babelOptions) {\n  let parserOpts = {\n    plugins: []\n  };\n\n  if (parserOptions) {\n    parserOpts = { ...parserOptions,\n      plugins: parserOptions.plugins ? [...parserOptions.plugins] : []\n    };\n  }\n\n  const partialConfig = babel.loadPartialConfig(babelOptions);\n\n  if (!partialConfig.hasFilesystemConfig() && parserOpts.plugins.length === 0) {\n    parserOpts.plugins = getDefaultPlugins(babelOptions);\n  } // Ensure we always have estree plugin enabled, if we add it a second time\n  // here it does not matter\n\n\n  parserOpts.plugins.push('estree');\n  return parserOpts;\n}\n\nfunction buildParse(options = {}) {\n  const {\n    parserOptions,\n    ...babelOptions\n  } = options;\n  const parserOpts = buildOptions(parserOptions, babelOptions);\n  return {\n    parse(src) {\n      return babel.parseSync(src, {\n        parserOpts,\n        ...babelOptions\n      });\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/babelParser.js"],"names":["Object","defineProperty","exports","value","default","buildParse","babel","require","path","TYPESCRIPT_EXTS","getDefaultPlugins","options","extname","filename","decoratorsBeforeExport","proposal","buildOptions","parserOptions","babelOptions","parserOpts","plugins","partialConfig","loadPartialConfig","hasFilesystemConfig","length","push","parse","src","parseSync"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AAEA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,eAAe,GAAG;AACtB,SAAO,IADe;AAEtB,UAAQ;AAFc,CAAxB;;AAKA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,SAAO,CAAC,KAAD,EAAQF,eAAe,CAACD,IAAI,CAACI,OAAL,CAAaD,OAAO,CAACE,QAAR,IAAoB,EAAjC,CAAD,CAAf,GAAwD,YAAxD,GAAuE,MAA/E,EAAuF,iBAAvF,EAA0G,QAA1G,EAAoH,iBAApH,EAAuI,wBAAvI,EAAiK,qBAAjK,EAAwL,CAAC,YAAD,EAAe;AAC5MC,IAAAA,sBAAsB,EAAE;AADoL,GAAf,CAAxL,EAEH,eAFG,EAEc,eAFd,EAE+B,mBAF/B,EAEoD,qBAFpD,EAE2E,cAF3E,EAE2F,cAF3F,EAE2G,YAF3G,EAEyH,mBAFzH,EAE8I,2BAF9I,EAE2K,kBAF3K,EAE+L,kBAF/L,EAEmN,sBAFnN,EAE2O,kBAF3O,EAE+P,CAAC,kBAAD,EAAqB;AACzRC,IAAAA,QAAQ,EAAE;AAD+Q,GAArB,CAF/P,EAIH,kBAJG,EAIiB,eAJjB,CAAP;AAKD;;AAED,SAASC,YAAT,CAAsBC,aAAtB,EAAqCC,YAArC,EAAmD;AACjD,MAAIC,UAAU,GAAG;AACfC,IAAAA,OAAO,EAAE;AADM,GAAjB;;AAIA,MAAIH,aAAJ,EAAmB;AACjBE,IAAAA,UAAU,GAAG,EAAE,GAAGF,aAAL;AACXG,MAAAA,OAAO,EAAEH,aAAa,CAACG,OAAd,GAAwB,CAAC,GAAGH,aAAa,CAACG,OAAlB,CAAxB,GAAqD;AADnD,KAAb;AAGD;;AAED,QAAMC,aAAa,GAAGf,KAAK,CAACgB,iBAAN,CAAwBJ,YAAxB,CAAtB;;AAEA,MAAI,CAACG,aAAa,CAACE,mBAAd,EAAD,IAAwCJ,UAAU,CAACC,OAAX,CAAmBI,MAAnB,KAA8B,CAA1E,EAA6E;AAC3EL,IAAAA,UAAU,CAACC,OAAX,GAAqBV,iBAAiB,CAACQ,YAAD,CAAtC;AACD,GAfgD,CAe/C;AACF;;;AAGAC,EAAAA,UAAU,CAACC,OAAX,CAAmBK,IAAnB,CAAwB,QAAxB;AACA,SAAON,UAAP;AACD;;AAED,SAASd,UAAT,CAAoBM,OAAO,GAAG,EAA9B,EAAkC;AAChC,QAAM;AACJM,IAAAA,aADI;AAEJ,OAAGC;AAFC,MAGFP,OAHJ;AAIA,QAAMQ,UAAU,GAAGH,YAAY,CAACC,aAAD,EAAgBC,YAAhB,CAA/B;AACA,SAAO;AACLQ,IAAAA,KAAK,CAACC,GAAD,EAAM;AACT,aAAOrB,KAAK,CAACsB,SAAN,CAAgBD,GAAhB,EAAqB;AAC1BR,QAAAA,UAD0B;AAE1B,WAAGD;AAFuB,OAArB,CAAP;AAID;;AANI,GAAP;AASD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = buildParse;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst babel = require('@babel/core');\n\nconst path = require('path');\n\nconst TYPESCRIPT_EXTS = {\n  '.ts': true,\n  '.tsx': true\n};\n\nfunction getDefaultPlugins(options) {\n  return ['jsx', TYPESCRIPT_EXTS[path.extname(options.filename || '')] ? 'typescript' : 'flow', 'asyncGenerators', 'bigInt', 'classProperties', 'classPrivateProperties', 'classPrivateMethods', ['decorators', {\n    decoratorsBeforeExport: false\n  }], 'doExpressions', 'dynamicImport', 'exportDefaultFrom', 'exportNamespaceFrom', 'functionBind', 'functionSent', 'importMeta', 'logicalAssignment', 'nullishCoalescingOperator', 'numericSeparator', 'objectRestSpread', 'optionalCatchBinding', 'optionalChaining', ['pipelineOperator', {\n    proposal: 'minimal'\n  }], 'throwExpressions', 'topLevelAwait'];\n}\n\nfunction buildOptions(parserOptions, babelOptions) {\n  let parserOpts = {\n    plugins: []\n  };\n\n  if (parserOptions) {\n    parserOpts = { ...parserOptions,\n      plugins: parserOptions.plugins ? [...parserOptions.plugins] : []\n    };\n  }\n\n  const partialConfig = babel.loadPartialConfig(babelOptions);\n\n  if (!partialConfig.hasFilesystemConfig() && parserOpts.plugins.length === 0) {\n    parserOpts.plugins = getDefaultPlugins(babelOptions);\n  } // Ensure we always have estree plugin enabled, if we add it a second time\n  // here it does not matter\n\n\n  parserOpts.plugins.push('estree');\n  return parserOpts;\n}\n\nfunction buildParse(options = {}) {\n  const {\n    parserOptions,\n    ...babelOptions\n  } = options;\n  const parserOpts = buildOptions(parserOptions, babelOptions);\n  return {\n    parse(src) {\n      return babel.parseSync(src, {\n        parserOpts,\n        ...babelOptions\n      });\n    }\n\n  };\n}"]},"metadata":{},"sourceType":"script"}