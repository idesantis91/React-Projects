{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDocblock = getDocblock;\nexports.getDoclets = getDoclets;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Helper functions to work with docblock comments.\n */\n\nconst DOCLET_PATTERN = /^@(\\w+)(?:$|\\s((?:[^](?!^@\\w))*))/gim;\n\nfunction parseDocblock(str) {\n  // Does not use \\s in the regex as this would match also \\n and conflicts\n  // with windows line endings.\n  return str.replace(/^[ \\t]*\\*[ \\t]?/gm, '').trim();\n}\n\nconst DOCBLOCK_HEADER = /^\\*\\s/;\n/**\n * Given a path, this function returns the closest preceding docblock if it\n * exists.\n */\n\nfunction getDocblock(path, trailing = false) {\n  let comments = [];\n\n  if (trailing && path.node.trailingComments) {\n    comments = path.node.trailingComments.filter(comment => comment.type === 'CommentBlock' && DOCBLOCK_HEADER.test(comment.value));\n  } else if (path.node.leadingComments) {\n    comments = path.node.leadingComments.filter(comment => comment.type === 'CommentBlock' && DOCBLOCK_HEADER.test(comment.value));\n  } else if (path.node.comments) {\n    comments = path.node.comments.filter(comment => comment.leading && comment.type === 'CommentBlock' && DOCBLOCK_HEADER.test(comment.value));\n  }\n\n  if (comments.length > 0) {\n    return parseDocblock(comments[comments.length - 1].value);\n  }\n\n  return null;\n}\n/**\n * Given a string, this functions returns an object with doclet names as keys\n * and their \"content\" as values.\n */\n\n\nfunction getDoclets(str) {\n  const doclets = Object.create(null);\n  let match = DOCLET_PATTERN.exec(str);\n\n  for (; match; match = DOCLET_PATTERN.exec(str)) {\n    doclets[match[1]] = match[2] || true;\n  }\n\n  return doclets;\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/docblock.js"],"names":["Object","defineProperty","exports","value","getDocblock","getDoclets","DOCLET_PATTERN","parseDocblock","str","replace","trim","DOCBLOCK_HEADER","path","trailing","comments","node","trailingComments","filter","comment","type","test","leadingComments","leading","length","doclets","create","match","exec"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBA,WAAtB;AACAF,OAAO,CAACG,UAAR,GAAqBA,UAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,sCAAvB;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B;AACA;AACA,SAAOA,GAAG,CAACC,OAAJ,CAAY,mBAAZ,EAAiC,EAAjC,EAAqCC,IAArC,EAAP;AACD;;AAED,MAAMC,eAAe,GAAG,OAAxB;AACA;AACA;AACA;AACA;;AAEA,SAASP,WAAT,CAAqBQ,IAArB,EAA2BC,QAAQ,GAAG,KAAtC,EAA6C;AAC3C,MAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAID,QAAQ,IAAID,IAAI,CAACG,IAAL,CAAUC,gBAA1B,EAA4C;AAC1CF,IAAAA,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,gBAAV,CAA2BC,MAA3B,CAAkCC,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiB,cAAjB,IAAmCR,eAAe,CAACS,IAAhB,CAAqBF,OAAO,CAACf,KAA7B,CAAhF,CAAX;AACD,GAFD,MAEO,IAAIS,IAAI,CAACG,IAAL,CAAUM,eAAd,EAA+B;AACpCP,IAAAA,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUM,eAAV,CAA0BJ,MAA1B,CAAiCC,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiB,cAAjB,IAAmCR,eAAe,CAACS,IAAhB,CAAqBF,OAAO,CAACf,KAA7B,CAA/E,CAAX;AACD,GAFM,MAEA,IAAIS,IAAI,CAACG,IAAL,CAAUD,QAAd,EAAwB;AAC7BA,IAAAA,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUD,QAAV,CAAmBG,MAAnB,CAA0BC,OAAO,IAAIA,OAAO,CAACI,OAAR,IAAmBJ,OAAO,CAACC,IAAR,KAAiB,cAApC,IAAsDR,eAAe,CAACS,IAAhB,CAAqBF,OAAO,CAACf,KAA7B,CAA3F,CAAX;AACD;;AAED,MAAIW,QAAQ,CAACS,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAOhB,aAAa,CAACO,QAAQ,CAACA,QAAQ,CAACS,MAAT,GAAkB,CAAnB,CAAR,CAA8BpB,KAA/B,CAApB;AACD;;AAED,SAAO,IAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASE,UAAT,CAAoBG,GAApB,EAAyB;AACvB,QAAMgB,OAAO,GAAGxB,MAAM,CAACyB,MAAP,CAAc,IAAd,CAAhB;AACA,MAAIC,KAAK,GAAGpB,cAAc,CAACqB,IAAf,CAAoBnB,GAApB,CAAZ;;AAEA,SAAOkB,KAAP,EAAcA,KAAK,GAAGpB,cAAc,CAACqB,IAAf,CAAoBnB,GAApB,CAAtB,EAAgD;AAC9CgB,IAAAA,OAAO,CAACE,KAAK,CAAC,CAAD,CAAN,CAAP,GAAoBA,KAAK,CAAC,CAAD,CAAL,IAAY,IAAhC;AACD;;AAED,SAAOF,OAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDocblock = getDocblock;\nexports.getDoclets = getDoclets;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Helper functions to work with docblock comments.\n */\nconst DOCLET_PATTERN = /^@(\\w+)(?:$|\\s((?:[^](?!^@\\w))*))/gim;\n\nfunction parseDocblock(str) {\n  // Does not use \\s in the regex as this would match also \\n and conflicts\n  // with windows line endings.\n  return str.replace(/^[ \\t]*\\*[ \\t]?/gm, '').trim();\n}\n\nconst DOCBLOCK_HEADER = /^\\*\\s/;\n/**\n * Given a path, this function returns the closest preceding docblock if it\n * exists.\n */\n\nfunction getDocblock(path, trailing = false) {\n  let comments = [];\n\n  if (trailing && path.node.trailingComments) {\n    comments = path.node.trailingComments.filter(comment => comment.type === 'CommentBlock' && DOCBLOCK_HEADER.test(comment.value));\n  } else if (path.node.leadingComments) {\n    comments = path.node.leadingComments.filter(comment => comment.type === 'CommentBlock' && DOCBLOCK_HEADER.test(comment.value));\n  } else if (path.node.comments) {\n    comments = path.node.comments.filter(comment => comment.leading && comment.type === 'CommentBlock' && DOCBLOCK_HEADER.test(comment.value));\n  }\n\n  if (comments.length > 0) {\n    return parseDocblock(comments[comments.length - 1].value);\n  }\n\n  return null;\n}\n/**\n * Given a string, this functions returns an object with doclet names as keys\n * and their \"content\" as values.\n */\n\n\nfunction getDoclets(str) {\n  const doclets = Object.create(null);\n  let match = DOCLET_PATTERN.exec(str);\n\n  for (; match; match = DOCLET_PATTERN.exec(str)) {\n    doclets[match[1]] = match[2] || true;\n  }\n\n  return doclets;\n}"]},"metadata":{},"sourceType":"script"}