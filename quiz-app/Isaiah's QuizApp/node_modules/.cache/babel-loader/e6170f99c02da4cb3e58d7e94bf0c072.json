{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getMembers;\n\nvar _astTypes = require(\"ast-types\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Given a \"nested\" Member/CallExpression, e.g.\n *\n * foo.bar()[baz][42]\n *\n * this returns a list of \"members\". In this example it would be something like\n * [\n *   {path: NodePath<bar>, arguments: NodePath<empty>, computed: false},\n *   {path: NodePath<baz>, arguments: null, computed: true},\n *   {path: NodePath<42>, arguments: null, computed: false}\n * ]\n */\n\n\nfunction getMembers(path, includeRoot = false) {\n  const result = [];\n  let argumentsPath = null; // eslint-disable-next-line no-constant-condition\n\n  loop: while (true) {\n    switch (true) {\n      case _astTypes.namedTypes.MemberExpression.check(path.node):\n        result.push({\n          path: path.get('property'),\n          computed: path.node.computed,\n          argumentsPath: argumentsPath\n        });\n        argumentsPath = null;\n        path = path.get('object');\n        break;\n\n      case _astTypes.namedTypes.CallExpression.check(path.node):\n        argumentsPath = path.get('arguments');\n        path = path.get('callee');\n        break;\n\n      default:\n        break loop;\n    }\n  }\n\n  if (includeRoot && result.length > 0) {\n    result.push({\n      path,\n      computed: false,\n      argumentsPath\n    });\n  }\n\n  return result.reverse();\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/getMembers.js"],"names":["Object","defineProperty","exports","value","default","getMembers","_astTypes","require","path","includeRoot","result","argumentsPath","loop","namedTypes","MemberExpression","check","node","push","get","computed","CallExpression","length","reverse"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,UAAT,CAAoBG,IAApB,EAA0BC,WAAW,GAAG,KAAxC,EAA+C;AAC7C,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,aAAa,GAAG,IAApB,CAF6C,CAEnB;;AAE1BC,EAAAA,IAAI,EAAE,OAAO,IAAP,EAAa;AACjB,YAAQ,IAAR;AACE,WAAKN,SAAS,CAACO,UAAV,CAAqBC,gBAArB,CAAsCC,KAAtC,CAA4CP,IAAI,CAACQ,IAAjD,CAAL;AACEN,QAAAA,MAAM,CAACO,IAAP,CAAY;AACVT,UAAAA,IAAI,EAAEA,IAAI,CAACU,GAAL,CAAS,UAAT,CADI;AAEVC,UAAAA,QAAQ,EAAEX,IAAI,CAACQ,IAAL,CAAUG,QAFV;AAGVR,UAAAA,aAAa,EAAEA;AAHL,SAAZ;AAKAA,QAAAA,aAAa,GAAG,IAAhB;AACAH,QAAAA,IAAI,GAAGA,IAAI,CAACU,GAAL,CAAS,QAAT,CAAP;AACA;;AAEF,WAAKZ,SAAS,CAACO,UAAV,CAAqBO,cAArB,CAAoCL,KAApC,CAA0CP,IAAI,CAACQ,IAA/C,CAAL;AACEL,QAAAA,aAAa,GAAGH,IAAI,CAACU,GAAL,CAAS,WAAT,CAAhB;AACAV,QAAAA,IAAI,GAAGA,IAAI,CAACU,GAAL,CAAS,QAAT,CAAP;AACA;;AAEF;AACE,cAAMN,IAAN;AAjBJ;AAmBD;;AAED,MAAIH,WAAW,IAAIC,MAAM,CAACW,MAAP,GAAgB,CAAnC,EAAsC;AACpCX,IAAAA,MAAM,CAACO,IAAP,CAAY;AACVT,MAAAA,IADU;AAEVW,MAAAA,QAAQ,EAAE,KAFA;AAGVR,MAAAA;AAHU,KAAZ;AAKD;;AAED,SAAOD,MAAM,CAACY,OAAP,EAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getMembers;\n\nvar _astTypes = require(\"ast-types\");\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Given a \"nested\" Member/CallExpression, e.g.\n *\n * foo.bar()[baz][42]\n *\n * this returns a list of \"members\". In this example it would be something like\n * [\n *   {path: NodePath<bar>, arguments: NodePath<empty>, computed: false},\n *   {path: NodePath<baz>, arguments: null, computed: true},\n *   {path: NodePath<42>, arguments: null, computed: false}\n * ]\n */\nfunction getMembers(path, includeRoot = false) {\n  const result = [];\n  let argumentsPath = null; // eslint-disable-next-line no-constant-condition\n\n  loop: while (true) {\n    switch (true) {\n      case _astTypes.namedTypes.MemberExpression.check(path.node):\n        result.push({\n          path: path.get('property'),\n          computed: path.node.computed,\n          argumentsPath: argumentsPath\n        });\n        argumentsPath = null;\n        path = path.get('object');\n        break;\n\n      case _astTypes.namedTypes.CallExpression.check(path.node):\n        argumentsPath = path.get('arguments');\n        path = path.get('callee');\n        break;\n\n      default:\n        break loop;\n    }\n  }\n\n  if (includeRoot && result.length > 0) {\n    result.push({\n      path,\n      computed: false,\n      argumentsPath\n    });\n  }\n\n  return result.reverse();\n}"]},"metadata":{},"sourceType":"script"}