{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getTypeParameters;\n\nvar _resolveGenericTypeAnnotation = _interopRequireDefault(require(\"../utils/resolveGenericTypeAnnotation\"));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction getTypeParameters(declaration, instantiation, inputParams) {\n  const params = {};\n  const numInstantiationParams = instantiation.node.params.length;\n  let i = 0;\n  declaration.get('params').each(paramPath => {\n    const key = paramPath.node.name;\n    const defaultTypePath = paramPath.node.default ? paramPath.get('default') : null;\n    const typePath = i < numInstantiationParams ? instantiation.get('params', i++) : defaultTypePath;\n\n    if (typePath) {\n      let resolvedTypePath = (0, _resolveGenericTypeAnnotation.default)(typePath) || typePath;\n      const typeName = resolvedTypePath.node.typeName || resolvedTypePath.node.id;\n\n      if (typeName && inputParams && inputParams[typeName.name]) {\n        resolvedTypePath = inputParams[typeName.name];\n      }\n\n      params[key] = resolvedTypePath;\n    }\n  });\n  return params;\n}","map":{"version":3,"sources":["/Users/idesantis/Documents/GitHub/cis413-submissions-group1/ProjectOne/Isaiah-scratch/quiz-app/Isaiah's QuizApp/node_modules/react-docgen/dist/utils/getTypeParameters.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","getTypeParameters","_resolveGenericTypeAnnotation","declaration","instantiation","inputParams","params","numInstantiationParams","node","length","i","get","each","paramPath","key","name","defaultTypePath","typePath","resolvedTypePath","typeName","id"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iBAAlB;;AAEA,IAAIC,6BAA6B,GAAGR,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA1D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,iBAAT,CAA2BE,WAA3B,EAAwCC,aAAxC,EAAuDC,WAAvD,EAAoE;AAClE,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,sBAAsB,GAAGH,aAAa,CAACI,IAAd,CAAmBF,MAAnB,CAA0BG,MAAzD;AACA,MAAIC,CAAC,GAAG,CAAR;AACAP,EAAAA,WAAW,CAACQ,GAAZ,CAAgB,QAAhB,EAA0BC,IAA1B,CAA+BC,SAAS,IAAI;AAC1C,UAAMC,GAAG,GAAGD,SAAS,CAACL,IAAV,CAAeO,IAA3B;AACA,UAAMC,eAAe,GAAGH,SAAS,CAACL,IAAV,CAAeR,OAAf,GAAyBa,SAAS,CAACF,GAAV,CAAc,SAAd,CAAzB,GAAoD,IAA5E;AACA,UAAMM,QAAQ,GAAGP,CAAC,GAAGH,sBAAJ,GAA6BH,aAAa,CAACO,GAAd,CAAkB,QAAlB,EAA4BD,CAAC,EAA7B,CAA7B,GAAgEM,eAAjF;;AAEA,QAAIC,QAAJ,EAAc;AACZ,UAAIC,gBAAgB,GAAG,CAAC,GAAGhB,6BAA6B,CAACF,OAAlC,EAA2CiB,QAA3C,KAAwDA,QAA/E;AACA,YAAME,QAAQ,GAAGD,gBAAgB,CAACV,IAAjB,CAAsBW,QAAtB,IAAkCD,gBAAgB,CAACV,IAAjB,CAAsBY,EAAzE;;AAEA,UAAID,QAAQ,IAAId,WAAZ,IAA2BA,WAAW,CAACc,QAAQ,CAACJ,IAAV,CAA1C,EAA2D;AACzDG,QAAAA,gBAAgB,GAAGb,WAAW,CAACc,QAAQ,CAACJ,IAAV,CAA9B;AACD;;AAEDT,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAcI,gBAAd;AACD;AACF,GAfD;AAgBA,SAAOZ,MAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getTypeParameters;\n\nvar _resolveGenericTypeAnnotation = _interopRequireDefault(require(\"../utils/resolveGenericTypeAnnotation\"));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction getTypeParameters(declaration, instantiation, inputParams) {\n  const params = {};\n  const numInstantiationParams = instantiation.node.params.length;\n  let i = 0;\n  declaration.get('params').each(paramPath => {\n    const key = paramPath.node.name;\n    const defaultTypePath = paramPath.node.default ? paramPath.get('default') : null;\n    const typePath = i < numInstantiationParams ? instantiation.get('params', i++) : defaultTypePath;\n\n    if (typePath) {\n      let resolvedTypePath = (0, _resolveGenericTypeAnnotation.default)(typePath) || typePath;\n      const typeName = resolvedTypePath.node.typeName || resolvedTypePath.node.id;\n\n      if (typeName && inputParams && inputParams[typeName.name]) {\n        resolvedTypePath = inputParams[typeName.name];\n      }\n\n      params[key] = resolvedTypePath;\n    }\n  });\n  return params;\n}"]},"metadata":{},"sourceType":"script"}